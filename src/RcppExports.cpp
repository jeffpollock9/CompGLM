// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// W
NumericVector W(NumericVector lam, NumericVector nu, int sumTo);
RcppExport SEXP _CompGLM_W(SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    rcpp_result_gen = Rcpp::wrap(W(lam, nu, sumTo));
    return rcpp_result_gen;
END_RCPP
}
// Y
NumericVector Y(NumericVector lam, NumericVector nu, int sumTo);
RcppExport SEXP _CompGLM_Y(SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    rcpp_result_gen = Rcpp::wrap(Y(lam, nu, sumTo));
    return rcpp_result_gen;
END_RCPP
}
// Z
NumericVector Z(NumericVector lam, NumericVector nu, int sumTo);
RcppExport SEXP _CompGLM_Z(SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    rcpp_result_gen = Rcpp::wrap(Z(lam, nu, sumTo));
    return rcpp_result_gen;
END_RCPP
}
// dcomp
NumericVector dcomp(IntegerVector y, NumericVector lam, NumericVector nu, int sumTo, bool logP);
RcppExport SEXP _CompGLM_dcomp(SEXP ySEXP, SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP, SEXP logPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    Rcpp::traits::input_parameter< bool >::type logP(logPSEXP);
    rcpp_result_gen = Rcpp::wrap(dcomp(y, lam, nu, sumTo, logP));
    return rcpp_result_gen;
END_RCPP
}
// pcomp
NumericVector pcomp(IntegerVector q, NumericVector lam, NumericVector nu, int sumTo, bool lowerTail, bool logP);
RcppExport SEXP _CompGLM_pcomp(SEXP qSEXP, SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP, SEXP lowerTailSEXP, SEXP logPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    Rcpp::traits::input_parameter< bool >::type lowerTail(lowerTailSEXP);
    Rcpp::traits::input_parameter< bool >::type logP(logPSEXP);
    rcpp_result_gen = Rcpp::wrap(pcomp(q, lam, nu, sumTo, lowerTail, logP));
    return rcpp_result_gen;
END_RCPP
}
// rcomp
IntegerVector rcomp(int n, double lam, double nu, int sumTo);
RcppExport SEXP _CompGLM_rcomp(SEXP nSEXP, SEXP lamSEXP, SEXP nuSEXP, SEXP sumToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type sumTo(sumToSEXP);
    rcpp_result_gen = Rcpp::wrap(rcomp(n, lam, nu, sumTo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompGLM_W", (DL_FUNC) &_CompGLM_W, 3},
    {"_CompGLM_Y", (DL_FUNC) &_CompGLM_Y, 3},
    {"_CompGLM_Z", (DL_FUNC) &_CompGLM_Z, 3},
    {"_CompGLM_dcomp", (DL_FUNC) &_CompGLM_dcomp, 5},
    {"_CompGLM_pcomp", (DL_FUNC) &_CompGLM_pcomp, 6},
    {"_CompGLM_rcomp", (DL_FUNC) &_CompGLM_rcomp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
